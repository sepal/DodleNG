// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "games",
    columns: [
      { name: "gameDate", type: "int" },
      { name: "word", type: "string" },
      { name: "prompt", type: "string" },
      { name: "bucketPrefix", type: "string" },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      {
        name: "updatedAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
    ],
  },
  {
    name: "images",
    columns: [
      { name: "level", type: "int" },
      { name: "score", type: "int" },
      { name: "key", type: "string" },
      { name: "dbRoundId", type: "int" },
      { name: "game", type: "link", link: { table: "games" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Games = InferredTypes["games"];
export type GamesRecord = Games & XataRecord;

export type Images = InferredTypes["images"];
export type ImagesRecord = Images & XataRecord;

export type DatabaseSchema = {
  games: GamesRecord;
  images: ImagesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Sebastian-s-workspace-u593rk.us-east-1.xata.sh/db/dodle",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
